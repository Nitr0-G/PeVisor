/*
 ███▄ ▄███▓▄▄▄      ██▀███  ██▓█    ██  ██████     ▄▄▄      ██ ▄█▄▄▄          ███▄    █ ██▄▄▄█████▓██▀███  ▒█████   ▄████ 
▓██▒▀█▀ ██▒████▄   ▓██ ▒ ██▓██▒██  ▓██▒██    ▒    ▒████▄    ██▄█▒████▄        ██ ▀█   █▓██▓  ██▒ ▓▓██ ▒ ██▒██▒  ██▒██▒ ▀█▒
▓██    ▓██▒██  ▀█▄ ▓██ ░▄█ ▒██▓██  ▒██░ ▓██▄      ▒██  ▀█▄ ▓███▄▒██  ▀█▄     ▓██  ▀█ ██▒██▒ ▓██░ ▒▓██ ░▄█ ▒██░  ██▒██░▄▄▄░
▒██    ▒██░██▄▄▄▄██▒██▀▀█▄ ░██▓▓█  ░██░ ▒   ██▒   ░██▄▄▄▄██▓██ █░██▄▄▄▄██    ▓██▒  ▐▌██░██░ ▓██▓ ░▒██▀▀█▄ ▒██   ██░▓█  ██▓
▒██▒   ░██▒▓█   ▓██░██▓ ▒██░██▒▒█████▓▒██████▒▒    ▓█   ▓██▒██▒ █▓█   ▓██▒   ▒██░   ▓██░██░ ▒██▒ ░░██▓ ▒██░ ████▓▒░▒▓███▀▒
░ ▒░   ░  ░▒▒   ▓▒█░ ▒▓ ░▒▓░▓ ░▒▓▒ ▒ ▒▒ ▒▓▒ ▒ ░    ▒▒   ▓▒█▒ ▒▒ ▓▒▒   ▓▒█░   ░ ▒░   ▒ ▒░▓   ▒ ░░  ░ ▒▓ ░▒▓░ ▒░▒░▒░ ░▒   ▒ 
░  ░      ░ ▒   ▒▒ ░ ░▒ ░ ▒░▒ ░░▒░ ░ ░░ ░▒  ░ ░     ▒   ▒▒ ░ ░▒ ▒░▒   ▒▒ ░   ░ ░░   ░ ▒░▒ ░   ░     ░▒ ░ ▒░ ░ ▒ ▒░  ░   ░ 
░      ░    ░   ▒    ░░   ░ ▒ ░░░░ ░ ░░  ░  ░       ░   ▒  ░ ░░ ░ ░   ▒         ░   ░ ░ ▒ ░ ░       ░░   ░░ ░ ░ ▒ ░ ░   ░ 
       ░        ░  ░  ░     ░    ░          ░           ░  ░  ░       ░  ░            ░ ░            ░        ░ ░       ░ 
                                                                                                                          

*/
#pragma once
#include <KNSoft/NDK/NDK.h>
#include <KNSoft/NDK/Win32/API/Ntdll.Hash.h>
#include "unicorn/unicorn.h"
#include "Emu/EmuUtils.hpp"
#include <string>
#include <vector>

namespace EmuApi {
    void EmuAddFontResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddFontResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAnimatePalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuArc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBitBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCancelDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChoosePixelFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCombineRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateBitmap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateBitmapIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateBrushIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateCompatibleBitmap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDiscardableBitmap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateCompatibleDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDCA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDCW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDIBitmap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDIBPatternBrush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDIBPatternBrushPt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateEllipticRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateEllipticRgnIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontIndirectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontIndirectW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHatchBrush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateICA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateICW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePen(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePenIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePolyPolygonRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePatternBrush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateRectRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateRectRgnIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateRoundRectRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateScalableFontResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateScalableFontResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSolidBrush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDescribePixelFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeviceCapabilitiesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeviceCapabilitiesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawEscape(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEllipse(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontFamiliesExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontFamiliesExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontFamiliesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontFamiliesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumFontsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumObjects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEqualRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEscape(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtEscape(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExcludeClipRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtCreateRegion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtFloodFill(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFillRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFloodFill(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFrameRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetROP2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAspectRatioFilterEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBkColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDCBrushColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDCPenColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBkMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBitmapBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBitmapDimensionEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBoundsRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBrushOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidthA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidthW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidth32A(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidth32W(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidthFloatA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidthFloatW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharABCWidthsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharABCWidthsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharABCWidthsFloatA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharABCWidthsFloatW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipBox(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMetaRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentPositionEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDeviceCaps(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDIBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFontData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGlyphOutlineA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGlyphOutlineW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGraphicsMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMapMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMetaFileBitsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNearestColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNearestPaletteIndex(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetObjectType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetOutlineTextMetricsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetOutlineTextMetricsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPixel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPixelFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPolyFillMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRasterizerCaps(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRandomRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRegionData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRgnBox(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetStockObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetStretchBltMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemPaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemPaletteUse(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextCharacterExtra(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextAlign(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentPointW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentPoint32A(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentPoint32W(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentExPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentExPointW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextCharset(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextCharsetInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTranslateCharsetInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFontLanguageInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharacterPlacementA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharacterPlacementW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFontUnicodeRanges(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGlyphIndicesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGlyphIndicesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentPointI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextExtentExPointI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharWidthI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCharABCWidthsI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddFontResourceExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddFontResourceExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveFontResourceExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveFontResourceExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddFontMemResourceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveFontMemResourceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontIndirectExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFontIndirectExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetViewportExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetViewportOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIntersectClipRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInvertRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLineDDA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLineTo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMaskBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPlgBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOffsetClipRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOffsetRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPatBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPie(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPlayMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPaintRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyPolygon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPtInRegion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPtVisible(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRectInRegion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRectVisible(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRectangle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRestoreDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuResetDCA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuResetDCW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRealizePalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveFontResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveFontResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRoundRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuResizePalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSaveDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSelectClipRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtSelectClipRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMetaRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSelectObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSelectPalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBkColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDCBrushColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDCPenColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBkMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBitmapBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBoundsRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDIBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDIBitsToDevice(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMapperFlags(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetGraphicsMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMapMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMetaFileBitsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPixel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPixelV(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPixelFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPolyFillMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStretchBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetRectRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStretchDIBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetROP2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetStretchBltMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetSystemPaletteUse(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTextCharacterExtra(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTextColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTextAlign(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTextJustification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUpdateColors(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAlphaBlend(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTransparentBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGradientFill(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiAlphaBlend(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiTransparentBlt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiGradientFill(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPlayMetaFileRecord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseEnhMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyEnhMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyEnhMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateEnhMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateEnhMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteEnhMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuEnumEnhMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileDescriptionA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileDescriptionW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFileHeader(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFilePaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnhMetaFilePixelFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWinMetaFileBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPlayEnhMetaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPlayEnhMetaFileRecord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetEnhMetaFileBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWinMetaFileBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiComment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextMetricsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextMetricsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAngleArc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyPolyline(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWorldTransform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWorldTransform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuModifyWorldTransform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCombineTransform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDIBSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDIBColorTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDIBColorTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetColorAdjustment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetColorAdjustment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHalftonePalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStartDocA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStartDocW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndDoc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStartPage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndPage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAbortDoc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetAbortProc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAbortPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuArcTo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBeginPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseFigure(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFillPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFlattenPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPathToRegion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyDraw(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSelectClipPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetArcDirection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMiterLimit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStrokeAndFillPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuStrokePath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWidenPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtCreatePen(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMiterLimit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetArcDirection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetObjectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetObjectW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveToEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTextOutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTextOutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtTextOutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExtTextOutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyTextOutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyTextOutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePolygonRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDPtoLP(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLPtoDP(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolygon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyline(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyBezier(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolyBezierTo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPolylineTo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetViewportExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetViewportOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOffsetViewportOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOffsetWindowOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScaleViewportExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScaleWindowExtEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBitmapDimensionEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetBrushOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextFaceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTextFaceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKerningPairsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKerningPairsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDCOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFixBrushOrgEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnrealizeObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiFlush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiSetBatchLimit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGdiGetBatchLimit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetICMMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckColorsInGamut(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetColorSpace(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLogColorSpaceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLogColorSpaceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateColorSpaceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateColorSpaceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetColorSpace(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteColorSpace(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetICMProfileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetICMProfileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetICMProfileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetICMProfileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDeviceGammaRamp(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDeviceGammaRamp(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuColorMatchToTarget(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumICMProfilesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumICMProfilesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuUpdateICMRegKeyA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuUpdateICMRegKeyW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuColorCorrectPalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglCopyContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglCreateContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglCreateLayerContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglDeleteContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglGetCurrentContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglGetCurrentDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglGetProcAddress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglMakeCurrent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglShareLists(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglUseFontBitmapsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglUseFontBitmapsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSwapBuffers(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglUseFontOutlinesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglUseFontOutlinesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglDescribeLayerPlane(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglSetLayerPaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglGetLayerPaletteEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglRealizeLayerPalette(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglSwapLayerBuffers(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuwglSwapMultipleBuffers(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);

}


/* number of functions: 364*/
