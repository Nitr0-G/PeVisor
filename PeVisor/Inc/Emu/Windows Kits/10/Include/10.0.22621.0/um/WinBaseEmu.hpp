/*
 ███▄ ▄███▓▄▄▄      ██▀███  ██▓█    ██  ██████     ▄▄▄      ██ ▄█▄▄▄          ███▄    █ ██▄▄▄█████▓██▀███  ▒█████   ▄████ 
▓██▒▀█▀ ██▒████▄   ▓██ ▒ ██▓██▒██  ▓██▒██    ▒    ▒████▄    ██▄█▒████▄        ██ ▀█   █▓██▓  ██▒ ▓▓██ ▒ ██▒██▒  ██▒██▒ ▀█▒
▓██    ▓██▒██  ▀█▄ ▓██ ░▄█ ▒██▓██  ▒██░ ▓██▄      ▒██  ▀█▄ ▓███▄▒██  ▀█▄     ▓██  ▀█ ██▒██▒ ▓██░ ▒▓██ ░▄█ ▒██░  ██▒██░▄▄▄░
▒██    ▒██░██▄▄▄▄██▒██▀▀█▄ ░██▓▓█  ░██░ ▒   ██▒   ░██▄▄▄▄██▓██ █░██▄▄▄▄██    ▓██▒  ▐▌██░██░ ▓██▓ ░▒██▀▀█▄ ▒██   ██░▓█  ██▓
▒██▒   ░██▒▓█   ▓██░██▓ ▒██░██▒▒█████▓▒██████▒▒    ▓█   ▓██▒██▒ █▓█   ▓██▒   ▒██░   ▓██░██░ ▒██▒ ░░██▓ ▒██░ ████▓▒░▒▓███▀▒
░ ▒░   ░  ░▒▒   ▓▒█░ ▒▓ ░▒▓░▓ ░▒▓▒ ▒ ▒▒ ▒▓▒ ▒ ░    ▒▒   ▓▒█▒ ▒▒ ▓▒▒   ▓▒█░   ░ ▒░   ▒ ▒░▓   ▒ ░░  ░ ▒▓ ░▒▓░ ▒░▒░▒░ ░▒   ▒ 
░  ░      ░ ▒   ▒▒ ░ ░▒ ░ ▒░▒ ░░▒░ ░ ░░ ░▒  ░ ░     ▒   ▒▒ ░ ░▒ ▒░▒   ▒▒ ░   ░ ░░   ░ ▒░▒ ░   ░     ░▒ ░ ▒░ ░ ▒ ▒░  ░   ░ 
░      ░    ░   ▒    ░░   ░ ▒ ░░░░ ░ ░░  ░  ░       ░   ▒  ░ ░░ ░ ░   ▒         ░   ░ ░ ▒ ░ ░       ░░   ░░ ░ ░ ▒ ░ ░   ░ 
       ░        ░  ░  ░     ░    ░          ░           ░  ░  ░       ░  ░            ░ ░            ░        ░ ░       ░ 
                                                                                                                          

*/
#pragma once
#include <KNSoft/NDK/NDK.h>
#include "unicorn/unicorn.h"
#include "Emu/EmuUtils.hpp"
#include <string>
#include <vector>

namespace EmuApi {
    //void EmuWinMain(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuwWinMain(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalAlloc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalReAlloc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalUnlock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalFlags(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalFree(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalCompact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalFix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalUnfix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalWire(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalUnWire(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalMemoryStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalAlloc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalReAlloc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalUnlock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalFlags(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalFree(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalShrink(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocalCompact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBinaryTypeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetBinaryTypeW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetShortPathNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLongPathNameTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLongPathNameTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProcessAffinityMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessAffinityMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProcessIoCounters(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFatalExit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetEnvironmentStringsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSwitchToFiber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteFiber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuConvertFiberToThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFiberEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuConvertThreadToFiberEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFiber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuConvertThreadToFiber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateUmsCompletionList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDequeueUmsCompletionListItems(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUmsCompletionListEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExecuteUmsThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUmsThreadYield(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteUmsCompletionList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentUmsThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNextUmsListItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryUmsThreadInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetUmsThreadInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteUmsThreadContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateUmsThreadContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnterUmsSchedulingMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUmsSystemThreadInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadAffinityMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessDEPPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProcessDEPPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRequestWakeupLatency(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsSystemResumeAutomatic(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetThreadSelectorEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadExecutionState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPowerCreateRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPowerSetRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPowerClearRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileCompletionNotificationModes(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWow64GetThreadSelectorEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDebugSetProcessKillOnExit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDebugBreakProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPulseEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalDeleteAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInitAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetHandleCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRequestDeviceWakeup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCancelDeviceWakeupRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDevicePowerState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMessageWaitingIndicator(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileShortNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileShortNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadModule(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWinExec(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClearCommBreak(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClearCommError(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetupComm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEscapeCommFunction(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommConfig(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommProperties(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommModemStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommTimeouts(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPurgeComm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCommBreak(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCommConfig(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCommMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCommState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCommTimeouts(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTransmitCommChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWaitCommEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenCommPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCommPorts(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTapePosition(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTapePosition(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPrepareTape(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEraseTape(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateTapePartition(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteTapemark(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTapeStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTapeParameters(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTapeParameters(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMulDiv(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemDEPPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemRegistryQuota(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFileTimeToDosDateTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDosDateTimeToFileTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFormatMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFormatMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMailslotA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMailslotW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMailslotInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMailslotInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEncryptFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEncryptFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDecryptFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDecryptFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFileEncryptionStatusA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFileEncryptionStatusW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenEncryptedFileRawA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenEncryptedFileRawW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadEncryptedFileRaw(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteEncryptedFileRaw(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseEncryptedFileRaw(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcmpA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcmpW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcmpiA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcmpiW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcpynA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcpynW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcpyA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcpyW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcatA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrcatW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrlenA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmulstrlenW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_lopen(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_lcreat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_lread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_lwrite(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_hread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_hwrite(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_lclose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emu_llseek(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsTextUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBackupRead(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBackupSeek(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBackupWrite(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenMutexA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSemaphoreA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenSemaphoreA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWaitableTimerA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenWaitableTimerA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSemaphoreExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWaitableTimerExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFileMappingA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFileMappingNumaA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenFileMappingA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLogicalDriveStringsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadPackagedLibrary(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryFullProcessImageNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryFullProcessImageNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetStartupInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFirmwareEnvironmentVariableA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFirmwareEnvironmentVariableW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFirmwareEnvironmentVariableExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFirmwareEnvironmentVariableExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFirmwareEnvironmentVariableA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFirmwareEnvironmentVariableW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFirmwareEnvironmentVariableExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFirmwareEnvironmentVariableExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFirmwareType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsNativeVhdBoot(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindResourceExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumResourceTypesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumResourceTypesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumResourceLanguagesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumResourceLanguagesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBeginUpdateResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBeginUpdateResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUpdateResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUpdateResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndUpdateResourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndUpdateResourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalAddAtomA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalAddAtomW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalAddAtomExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalAddAtomExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalFindAtomA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalFindAtomW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalGetAtomNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGlobalGetAtomNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddAtomA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddAtomW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindAtomA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindAtomW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAtomNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAtomNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileIntA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileIntW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteProfileStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteProfileStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileSectionA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProfileSectionW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteProfileSectionA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWriteProfileSectionW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileIntA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileIntW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileSectionA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileSectionW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileSectionA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileSectionW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileSectionNamesA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileSectionNamesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileStructA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPrivateProfileStructW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileStructA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWritePrivateProfileStructW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDllDirectoryA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDllDirectoryW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDllDirectoryA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDllDirectoryW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetSearchPathMode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDirectoryExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDirectoryExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDirectoryTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDirectoryTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveDirectoryTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveDirectoryTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFullPathNameTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFullPathNameTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefineDosDeviceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryDosDeviceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFileTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateFileTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReOpenFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileAttributesTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileAttributesTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFileAttributesTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFileAttributesTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCompressedFileSizeTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCompressedFileSizeTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteFileTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteFileTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckNameLegalDOS8Dot3A(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckNameLegalDOS8Dot3W(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstFileTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstFileTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFileTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyFile2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileWithProgressA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileWithProgressW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveFileTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReplaceFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReplaceFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHardLinkA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHardLinkW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHardLinkTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateHardLinkTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstStreamTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstFileNameTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateNamedPipeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeHandleStateA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallNamedPipeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWaitNamedPipeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeClientComputerNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeClientProcessId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeClientSessionId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeServerProcessId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNamedPipeServerSessionId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetVolumeLabelA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetVolumeLabelW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileBandwidthReservation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFileBandwidthReservation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClearEventLogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClearEventLogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBackupEventLogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBackupEventLogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseEventLog(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeregisterEventSource(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNotifyChangeEventLog(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumberOfEventLogRecords(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetOldestEventLogRecord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenEventLogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenEventLogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterEventSourceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterEventSourceW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenBackupEventLogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenBackupEventLogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadEventLogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadEventLogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReportEventA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReportEventW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEventLogInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOperationStart(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOperationEnd(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAccessCheckAndAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAccessCheckByTypeAndAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAccessCheckByTypeResultListAndAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAccessCheckByTypeResultListAndAuditAlarmByHandleA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuObjectOpenAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuObjectPrivilegeAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuObjectCloseAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuObjectDeleteAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPrivilegedServiceAuditAlarmA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddConditionalAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFileSecurityA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFileSecurityA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadDirectoryChangesW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadDirectoryChangesExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapViewOfFileExNuma(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadReadPtr(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadWritePtr(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadHugeReadPtr(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadHugeWritePtr(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadCodePtr(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadStringPtrA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsBadStringPtrW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountSidA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountSidW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountNameLocalA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountNameLocalW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountSidLocalA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupAccountSidLocalW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeValueA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeValueW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeDisplayNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupPrivilegeDisplayNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBuildCommDCBA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBuildCommDCBW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBuildCommDCBAndTimeoutsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBuildCommDCBAndTimeoutsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCommConfigDialogA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCommConfigDialogW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDefaultCommConfigA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDefaultCommConfigW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDefaultCommConfigA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDefaultCommConfigW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetComputerNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetComputerNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDnsHostnameToComputerNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDnsHostnameToComputerNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUserNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUserNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogonUserA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogonUserW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogonUserExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogonUserExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateProcessWithLogonW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateProcessWithTokenW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsTokenUntrusted(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterWaitForSingleObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterWait(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBindIoCompletionCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTimerQueueTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCancelTimerQueueTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInitializeThreadpoolEnvironment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuSetThreadpoolCallbackPool(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuSetThreadpoolCallbackCleanupGroup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadpoolCallbackRunsLong(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadpoolCallbackLibrary(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadpoolCallbackPriority(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyThreadpoolEnvironment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadpoolCallbackPersistent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePrivateNamespaceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenPrivateNamespaceA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateBoundaryDescriptorA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddIntegrityLabelToBoundaryDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentHwProfileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentHwProfileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVerifyVersionInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVerifyVersionInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetSystemPowerState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemPowerStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapUserPhysicalPagesScatter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateJobObjectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenJobObjectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateJobSet(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstVolumeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindNextVolumeA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstVolumeMountPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindFirstVolumeMountPointW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindNextVolumeMountPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindNextVolumeMountPointW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindVolumeMountPointClose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetVolumeMountPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetVolumeMountPointW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteVolumeMountPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetVolumeNameForVolumeMountPointA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetVolumePathNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetVolumePathNamesForVolumeNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateActCtxA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateActCtxW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddRefActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReleaseActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZombifyActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuActivateActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeactivateActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentActCtx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindActCtxSectionStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindActCtxSectionStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindActCtxSectionGuid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryActCtxW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWTSGetActiveConsoleSessionId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuWTSGetServiceSessionId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuWTSIsServerContainer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetActiveProcessorGroupCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMaximumProcessorGroupCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetActiveProcessorCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMaximumProcessorCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaProcessorNode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaNodeNumberFromHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaProcessorNodeEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaNodeProcessorMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaAvailableMemoryNode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaAvailableMemoryNodeEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNumaProximityNode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterApplicationRecoveryCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterApplicationRecoveryCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterApplicationRestart(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterApplicationRestart(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetApplicationRecoveryCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetApplicationRestartSettings(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuApplicationRecoveryInProgress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuApplicationRecoveryFinished(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFileInformationByHandleEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenFileById(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSymbolicLinkA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSymbolicLinkW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryActCtxSettingsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSymbolicLinkTransactedA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSymbolicLinkTransactedW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReplacePartitionUnit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddSecureMemoryCacheCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveSecureMemoryCacheCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInitializeContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInitializeContext2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetEnabledXStateFeatures(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetXStateFeaturesMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLocateXStateFeature(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetXStateFeaturesMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetThreadEnabledXStateFeatures(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableProcessOptionalXStateFeatures(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableThreadProfiling(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDisableThreadProfiling(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuQueryThreadProfiling(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReadThreadProfilingData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRaiseCustomSystemEventTrigger(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);

}


/* number of functions: 483*/
