/*
 ███▄ ▄███▓▄▄▄      ██▀███  ██▓█    ██  ██████     ▄▄▄      ██ ▄█▄▄▄          ███▄    █ ██▄▄▄█████▓██▀███  ▒█████   ▄████ 
▓██▒▀█▀ ██▒████▄   ▓██ ▒ ██▓██▒██  ▓██▒██    ▒    ▒████▄    ██▄█▒████▄        ██ ▀█   █▓██▓  ██▒ ▓▓██ ▒ ██▒██▒  ██▒██▒ ▀█▒
▓██    ▓██▒██  ▀█▄ ▓██ ░▄█ ▒██▓██  ▒██░ ▓██▄      ▒██  ▀█▄ ▓███▄▒██  ▀█▄     ▓██  ▀█ ██▒██▒ ▓██░ ▒▓██ ░▄█ ▒██░  ██▒██░▄▄▄░
▒██    ▒██░██▄▄▄▄██▒██▀▀█▄ ░██▓▓█  ░██░ ▒   ██▒   ░██▄▄▄▄██▓██ █░██▄▄▄▄██    ▓██▒  ▐▌██░██░ ▓██▓ ░▒██▀▀█▄ ▒██   ██░▓█  ██▓
▒██▒   ░██▒▓█   ▓██░██▓ ▒██░██▒▒█████▓▒██████▒▒    ▓█   ▓██▒██▒ █▓█   ▓██▒   ▒██░   ▓██░██░ ▒██▒ ░░██▓ ▒██░ ████▓▒░▒▓███▀▒
░ ▒░   ░  ░▒▒   ▓▒█░ ▒▓ ░▒▓░▓ ░▒▓▒ ▒ ▒▒ ▒▓▒ ▒ ░    ▒▒   ▓▒█▒ ▒▒ ▓▒▒   ▓▒█░   ░ ▒░   ▒ ▒░▓   ▒ ░░  ░ ▒▓ ░▒▓░ ▒░▒░▒░ ░▒   ▒ 
░  ░      ░ ▒   ▒▒ ░ ░▒ ░ ▒░▒ ░░▒░ ░ ░░ ░▒  ░ ░     ▒   ▒▒ ░ ░▒ ▒░▒   ▒▒ ░   ░ ░░   ░ ▒░▒ ░   ░     ░▒ ░ ▒░ ░ ▒ ▒░  ░   ░ 
░      ░    ░   ▒    ░░   ░ ▒ ░░░░ ░ ░░  ░  ░       ░   ▒  ░ ░░ ░ ░   ▒         ░   ░ ░ ▒ ░ ░       ░░   ░░ ░ ░ ▒ ░ ░   ░ 
       ░        ░  ░  ░     ░    ░          ░           ░  ░  ░       ░  ░            ░ ░            ░        ░ ░       ░ 
                                                                                                                          

*/
#pragma once
#include <KNSoft/NDK/NDK.h>
#include "unicorn/unicorn.h"
#include "Emu/EmuUtils.hpp"
#include <string>
#include <vector>

namespace EmuApi {
    void EmuLoadKeyboardLayoutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadKeyboardLayoutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuActivateKeyboardLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuToUnicodeEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnloadKeyboardLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardLayoutNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardLayoutNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardLayoutList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMouseMovePointsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenDesktopA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenDesktopW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenInputDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumDesktopsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumDesktopsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumDesktopWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSwitchDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetThreadDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWindowStationA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWindowStationW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenWindowStationA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenWindowStationW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumWindowStationsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumWindowStationsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseWindowStation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessWindowStation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProcessWindowStation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetUserObjectSecurity(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUserObjectSecurity(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUserObjectInformationA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUserObjectInformationW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetUserObjectInformationA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetUserObjectInformationW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsHungAppWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDisableProcessWindowsGhosting(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterWindowMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterWindowMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTrackMouseEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawEdge(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawFrameControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawCaption(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawAnimatedRects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTranslateMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDispatchMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDispatchMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMessageQueue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPeekMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPeekMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterHotKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterHotKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExitWindowsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSwapMouseButton(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMessagePos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMessageTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMessageExtraInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUnpredictedMessagePos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWow64Message(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMessageExtraInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageTimeoutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageTimeoutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendNotifyMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendNotifyMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageCallbackA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendMessageCallbackW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBroadcastSystemMessageExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBroadcastSystemMessageExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBroadcastSystemMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBroadcastSystemMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterDeviceNotificationA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterDeviceNotificationW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterDeviceNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterPowerSettingNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterPowerSettingNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterSuspendResumeNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterSuspendResumeNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPostMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPostMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPostThreadMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPostThreadMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAttachThreadInput(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReplyMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWaitMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWaitForInputIdle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefWindowProcA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefWindowProcW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPostQuitMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallWindowProcA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallWindowProcW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInSendMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInSendMessageEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDoubleClickTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDoubleClickTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClassA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClassW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterClassA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterClassW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClassExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClassExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassInfoExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassInfoExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWindowExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateWindowExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsChild(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAnimateWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLayeredWindowAttributes(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPrintWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetLayeredWindowAttributes(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowWindowAsync(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFlashWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFlashWindowEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowOwnedPopups(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenIcon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMoveWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowPlacement(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowPlacement(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowDisplayAffinity(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowDisplayAffinity(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBeginDeferWindowPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeferWindowPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndDeferWindowPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWindowVisible(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsIconic(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAnyPopup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBringWindowToTop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsZoomed(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDialogParamA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDialogParamW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDialogIndirectParamA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateDialogIndirectParamW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDialogBoxParamA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDialogBoxParamW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDialogBoxIndirectParamA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDialogBoxIndirectParamW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndDialog(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDlgItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDlgItemInt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDlgItemInt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDlgItemTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDlgItemTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDlgItemTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDlgItemTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckDlgButton(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckRadioButton(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsDlgButtonChecked(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendDlgItemMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendDlgItemMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNextDlgGroupItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetNextDlgTabItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDlgCtrlID(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDialogBaseUnits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefDlgProcA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefDlgProcW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDialogControlDpiChangeBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDialogControlDpiChangeBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDialogDpiChangeBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDialogDpiChangeBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallMsgFilterA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallMsgFilterW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOpenClipboard(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseClipboard(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardSequenceNumber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardOwner(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClipboardViewer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardViewer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChangeClipboardChain(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClipboardData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClipboardFormatA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterClipboardFormatW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCountClipboardFormats(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumClipboardFormats(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardFormatNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipboardFormatNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEmptyClipboard(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsClipboardFormatAvailable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPriorityClipboardFormat(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetOpenClipboardWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAddClipboardFormatListener(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveClipboardFormatListener(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUpdatedClipboardFormats(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharToOemA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharToOemW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOemToCharA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOemToCharW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharToOemBuffA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharToOemBuffW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOemToCharBuffA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOemToCharBuffW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharUpperA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharUpperW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharUpperBuffA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharUpperBuffW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharLowerA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharLowerW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharLowerBuffA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharLowerBuffW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharNextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharNextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharPrevA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharPrevW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharNextExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCharPrevExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharAlphaA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharAlphaW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharAlphaNumericA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharAlphaNumericW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharUpperA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharUpperW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharLowerA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsCharLowerW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetFocus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetActiveWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetFocus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKBCodePage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAsyncKeyState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetKeyboardState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyNameTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyNameTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetKeyboardType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuToAscii(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuToAsciiEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuToUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOemKeyScan(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVkKeyScanA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVkKeyScanW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVkKeyScanExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuVkKeyScanExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emukeybd_event(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void Emumouse_event(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSendInput(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTouchInputInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseTouchInputHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterTouchWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterTouchWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsTouchWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInitializeTouchInjection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInjectTouchInput(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerCursorId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFrameInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFrameInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerTouchInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerTouchInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFrameTouchInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFrameTouchInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerPenInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerPenInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFramePenInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerFramePenInfoHistory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSkipPointerFrameMessages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterPointerInputTarget(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterPointerInputTarget(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterPointerInputTargetEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnregisterPointerInputTargetEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateSyntheticPointerDevice(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInjectSyntheticPointerInput(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroySyntheticPointerDevice(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableMouseInPointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsMouseInPointerEnabled(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterTouchHitTestingWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEvaluateProximityToRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEvaluateProximityToPolygon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPackTouchHitTestingProximityEvaluation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowFeedbackSetting(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowFeedbackSetting(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerInputTransform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLastInputInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapVirtualKeyA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapVirtualKeyW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapVirtualKeyExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapVirtualKeyExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetInputState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetQueueStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCapture(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCapture(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReleaseCapture(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMsgWaitForMultipleObjects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMsgWaitForMultipleObjectsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCoalescableTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuKillTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWindowUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWindowEnabled(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadAcceleratorsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadAcceleratorsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateAcceleratorTableA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateAcceleratorTableW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyAcceleratorTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyAcceleratorTableA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyAcceleratorTableW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTranslateAcceleratorA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTranslateAcceleratorW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemMetrics(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemMetricsForDpi(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadMenuA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadMenuW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadMenuIndirectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadMenuIndirectW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChangeMenuA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChangeMenuW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuHiliteMenuItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawMenuBar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreatePopupMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckMenuItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableMenuItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSubMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuItemID(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuItemCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInsertMenuA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInsertMenuW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAppendMenuA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAppendMenuW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuModifyMenuA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuModifyMenuW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemoveMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeleteMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuItemBitmaps(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuCheckMarkDimensions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTrackPopupMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTrackPopupMenuEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCalculatePopupWindowPosition(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndMenu(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInsertMenuItemA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInsertMenuItemW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuItemInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuItemInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuItemInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuItemInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuDefaultItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuDefaultItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuItemRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMenuItemFromPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDragObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDragDetect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawIcon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawTextExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawTextExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGrayStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGrayStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawStateA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawStateW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTabbedTextOutA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTabbedTextOutW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTabbedTextExtentA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTabbedTextExtentW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUpdateWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetActiveWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetForegroundWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPaintDesktop(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSwitchToThisWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetForegroundWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAllowSetForegroundWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLockSetForegroundWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWindowFromDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDCEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuReleaseDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBeginPaint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEndPaint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUpdateRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetUpdateRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowRgnBox(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuExcludeUpdateRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInvalidateRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuValidateRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInvalidateRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuValidateRgn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRedrawWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLockWindowUpdate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScrollWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScrollDC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScrollWindowEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetScrollPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetScrollPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetScrollRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetScrollRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowScrollBar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableScrollBar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPropA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPropW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPropA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPropW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemovePropA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRemovePropW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumPropsExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumPropsExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumPropsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumPropsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowTextA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowTextW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowTextLengthA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowTextLengthW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClientRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAdjustWindowRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAdjustWindowRectEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAdjustWindowRectExForDpi(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowContextHelpId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowContextHelpId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetMenuContextHelpId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuContextHelpId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxIndirectA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBoxIndirectW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMessageBeep(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCursorPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetPhysicalCursorPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCursorPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPhysicalCursorPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClipCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateCaret(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCaretBlinkTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCaretBlinkTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyCaret(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuHideCaret(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShowCaret(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetCaretPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCaretPos(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClientToScreen(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuScreenToClient(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogicalToPhysicalPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPhysicalToLogicalPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLogicalToPhysicalPointForPerMonitorDPI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPhysicalToLogicalPointForPerMonitorDPI(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapWindowPoints(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWindowFromPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWindowFromPhysicalPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChildWindowFromPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuClipCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChildWindowFromPointEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSysColor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSysColorBrush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetSysColors(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawFocusRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFillRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFrameRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInvertRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetRectEmpty(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInflateRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIntersectRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnionRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSubtractRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuOffsetRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsRectEmpty(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEqualRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPtInRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowWord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowWord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowLongA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowLongW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowLongA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowLongW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowLongPtrA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowLongPtrW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowLongPtrA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowLongPtrW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassWord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClassWord(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassLongA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassLongW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClassLongA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClassLongW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassLongPtrA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassLongPtrW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClassLongPtrA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetClassLongPtrW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetProcessDefaultLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessDefaultLayout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDesktopWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetParent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetParent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumChildWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindWindowA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindWindowW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindWindowExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuFindWindowExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetShellWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterShellHookWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDeregisterShellHookWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumThreadWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetClassNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTopWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowThreadProcessId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsGUIThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetLastActivePopup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowsHookA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowsHookW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnhookWindowsHook(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowsHookExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWindowsHookExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnhookWindowsHookEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCallNextHookEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCheckMenuRadioItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadBitmapA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadBitmapW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadCursorA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadCursorW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadCursorFromFileA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadCursorFromFileW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetSystemCursor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadIconA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadIconW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPrivateExtractIconsA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPrivateExtractIconsW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateIcon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDestroyIcon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupIconIdFromDirectory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLookupIconIdFromDirectoryEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateIconFromResource(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateIconFromResourceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadImageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLoadImageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyImage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDrawIconEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateIconIndirect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCopyIcon(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetIconInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetIconInfoExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetIconInfoExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsDialogMessageA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsDialogMessageW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMapDialogRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirListA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirListW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirSelectExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirSelectExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirListComboBoxA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirListComboBoxW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirSelectComboBoxExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDlgDirSelectComboBoxExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetScrollInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetScrollInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefFrameProcA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefFrameProcW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefMDIChildProcA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefMDIChildProcW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTranslateMDISysAccel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuArrangeIconicWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMDIWindowA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCreateMDIWindowW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuTileWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCascadeWindows(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWinHelpA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuWinHelpW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGuiResources(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSystemParametersInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSystemParametersInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSystemParametersInfoForDpi(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSoundSentry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDebugErrorLevel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetLastErrorEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInternalGetWindowText(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCancelShutdown(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMonitorFromPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMonitorFromRect(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuMonitorFromWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMonitorInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMonitorInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnumDisplayMonitors(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNotifyWinEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetWinEventHook(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsWinEventHookInstalled(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUnhookWinEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGUIThreadInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuBlockInput(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessDPIAware(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsProcessDPIAware(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetThreadDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAwarenessFromDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDpiFromDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuAreDpiAwarenessContextsEqual(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsValidDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDpiForWindow(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDpiForSystem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetSystemDpiForProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEnableNonClientDpiScaling(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuInheritWindowMonitor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessDpiAwarenessContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDpiAwarenessContextForProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetThreadDpiHostingBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetThreadDpiHostingBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowDpiHostingBehavior(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowModuleFileNameA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowModuleFileNameW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCursorInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetWindowInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetTitleBarInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetMenuBarInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetScrollBarInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetComboBoxInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAncestor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRealChildWindowFromPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRealGetWindowClassA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRealGetWindowClassW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAltTabInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAltTabInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetListBoxInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLockWorkStation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuUserHandleGrantAccess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawInputData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawInputDeviceInfoA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawInputDeviceInfoW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawInputBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterRawInputDevices(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRegisteredRawInputDevices(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawInputDeviceList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDefRawInputProc(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerDevices(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerDevice(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerDeviceProperties(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterPointerDeviceNotifications(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerDeviceRects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetPointerDeviceCursors(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetRawPointerDeviceData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChangeWindowMessageFilter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuChangeWindowMessageFilterEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGestureInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGestureExtraArgs(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCloseGestureInfoHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetGestureConfig(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetGestureConfig(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShutdownBlockReasonCreate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShutdownBlockReasonQuery(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuShutdownBlockReasonDestroy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCurrentInputMessageSource(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetCIMSSM(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetAutoRotationState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuGetDisplayAutoRotationPreferences(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetDisplayAutoRotationPreferences(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuIsImmersiveProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuSetProcessRestrictionExemption(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
#ifdef _WIN32_WINNT_WIN11
    void EmuSetAdditionalForegroundBoostProcesses(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRegisterForTooltipDismissNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
#endif

}


/* number of functions: 684*/
