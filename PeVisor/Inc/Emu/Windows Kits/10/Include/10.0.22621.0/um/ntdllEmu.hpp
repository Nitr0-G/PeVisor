/*
 ███▄ ▄███▓▄▄▄      ██▀███  ██▓█    ██  ██████     ▄▄▄      ██ ▄█▄▄▄          ███▄    █ ██▄▄▄█████▓██▀███  ▒█████   ▄████ 
▓██▒▀█▀ ██▒████▄   ▓██ ▒ ██▓██▒██  ▓██▒██    ▒    ▒████▄    ██▄█▒████▄        ██ ▀█   █▓██▓  ██▒ ▓▓██ ▒ ██▒██▒  ██▒██▒ ▀█▒
▓██    ▓██▒██  ▀█▄ ▓██ ░▄█ ▒██▓██  ▒██░ ▓██▄      ▒██  ▀█▄ ▓███▄▒██  ▀█▄     ▓██  ▀█ ██▒██▒ ▓██░ ▒▓██ ░▄█ ▒██░  ██▒██░▄▄▄░
▒██    ▒██░██▄▄▄▄██▒██▀▀█▄ ░██▓▓█  ░██░ ▒   ██▒   ░██▄▄▄▄██▓██ █░██▄▄▄▄██    ▓██▒  ▐▌██░██░ ▓██▓ ░▒██▀▀█▄ ▒██   ██░▓█  ██▓
▒██▒   ░██▒▓█   ▓██░██▓ ▒██░██▒▒█████▓▒██████▒▒    ▓█   ▓██▒██▒ █▓█   ▓██▒   ▒██░   ▓██░██░ ▒██▒ ░░██▓ ▒██░ ████▓▒░▒▓███▀▒
░ ▒░   ░  ░▒▒   ▓▒█░ ▒▓ ░▒▓░▓ ░▒▓▒ ▒ ▒▒ ▒▓▒ ▒ ░    ▒▒   ▓▒█▒ ▒▒ ▓▒▒   ▓▒█░   ░ ▒░   ▒ ▒░▓   ▒ ░░  ░ ▒▓ ░▒▓░ ▒░▒░▒░ ░▒   ▒ 
░  ░      ░ ▒   ▒▒ ░ ░▒ ░ ▒░▒ ░░▒░ ░ ░░ ░▒  ░ ░     ▒   ▒▒ ░ ░▒ ▒░▒   ▒▒ ░   ░ ░░   ░ ▒░▒ ░   ░     ░▒ ░ ▒░ ░ ▒ ▒░  ░   ░ 
░      ░    ░   ▒    ░░   ░ ▒ ░░░░ ░ ░░  ░  ░       ░   ▒  ░ ░░ ░ ░   ▒         ░   ░ ░ ▒ ░ ░       ░░   ░░ ░ ░ ▒ ░ ░   ░ 
       ░        ░  ░  ░     ░    ░          ░           ░  ░  ░       ░  ░            ░ ░            ░        ░ ░       ░ 
                                                                                                                          

*/
#pragma once
#include <KNSoft/NDK/NDK.h>
#include <KNSoft/NDK/Win32/API/Ntdll.Hash.h>
#include "unicorn/unicorn.h"
#include "Emu/EmuUtils.hpp"
#include <string>
#include <in6addr.h>
#include <inaddr.h>
#include <ip2string.h>
#include <vector>

namespace EmuApi {
    void EmuNtCurrentPeb(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupOpenLocalPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupClose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupTranslateSids(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupTranslateNames(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupGetDomainInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupFreeMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaRegisterLogonProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLogonUser(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupAuthenticationPackage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaFreeReturnBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaCallAuthenticationPackage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaDeregisterLogonProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaConnectUntrusted(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaFreeMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaClose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaEnumerateLogonSessions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaGetLogonSessionData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaOpenPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaQueryInformationPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaSetInformationPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaQueryDomainInformationPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaSetDomainInformationPolicy(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaRegisterPolicyChangeNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaUnregisterPolicyChangeNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaEnumerateTrustedDomains(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupNames(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupNames2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaLookupSids(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaEnumerateAccountsWithUserRight(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaEnumerateAccountRights(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaAddAccountRights(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLsaRemoveAccountRights(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaOpenTrustedDomainByName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaQueryTrustedDomainInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaSetTrustedDomainInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaDeleteTrustedDomain(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaQueryTrustedDomainInfoByName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaSetTrustedDomainInfoByName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaEnumerateTrustedDomainsEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaCreateTrustedDomainEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaQueryForestTrustInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaSetForestTrustInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaStorePrivateData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaRetrievePrivateData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLsaNtStatusToWinError(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuGetKUserSharedData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtGetTickCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlReleaseMemoryStream(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlSetMemoryStreamSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCommitMemoryStream(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlRevertMemoryStream(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopySecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeHandleTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyHandleTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAllocateHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsValidHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsValidIndexHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEmptyAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAtomToAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLookupAtomInAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteAtomFromAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlPinAtomInAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryAtomInAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlQueryAtomsInAtomTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetIntegerAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInterlockedPushListSList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAssert(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInsertElementGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInsertElementGenericTableFullAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteElementGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLookupElementGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLookupElementGenericTableFullAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnumerateGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnumerateGenericTableWithoutSplayingAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnumerateGenericTableLikeADirectory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetElementGenericTableAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNumberGenericTableElementsAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsGenericTableEmptyAvl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSplay(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDelete(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteNoSplay(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSubtreeSuccessor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSubtreePredecessor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRealSuccessor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRealPredecessor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInsertElementGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInsertElementGenericTableFull(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteElementGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLookupElementGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLookupElementGenericTableFull(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnumerateGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnumerateGenericTableWithoutSplaying(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetElementGenericTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNumberGenericTableElements(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsGenericTableEmpty(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeHeapManager(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAllocateHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSizeHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlZeroHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlProtectHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetNtGlobalFlags(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCallersAddress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlWalkFrameChain(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLogStackBackTrace(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCaptureStackContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetNtProductType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFormatCurrentUserKeyPath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlOpenCurrentUser(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryRegistryValues(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlWriteRegistryValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteRegistryValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateRegistryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCheckRegistryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLockHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnlockHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlReAllocateHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetUserInfoHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetUserValueHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetUserFlagsHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateTagHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlQueryTagHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlExtendHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompactHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidateProcessHeaps(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetProcessHeaps(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlUsageHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlWalkHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultipleAllocateHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultipleFreeHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDetectHeapLeaks(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAllocateMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlResetMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLockMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnlockMemoryZone(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAllocateMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlExtendMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlResetMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLockMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnlockMemoryBlockLookaside(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCurrentTransaction(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetCurrentTransaction(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateQueryDebugBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyQueryDebugBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessDebugInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUniform(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlComputeImportTableHash(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIntegerToChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlIntegerToUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLargeIntegerToChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerToUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4AddressToStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6AddressToStringA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4AddressToStringExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6AddressToStringExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4AddressToStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6AddressToStringW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4AddressToStringExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6AddressToStringExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4StringToAddressA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6StringToAddressA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4StringToAddressExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6StringToAddressExA(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4StringToAddressW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6StringToAddressW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv4StringToAddressExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIpv6StringToAddressExW(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIntegerToUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInt64ToUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeStringToInteger(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitAnsiString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitUnicodeStringEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitAnsiStringEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualDomainName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualComputerName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDnsHostNameToComputerName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateUnicodeStringFromAsciiz(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopyString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpperChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompareString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlPrefixString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpperString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAppendAsciizToString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAppendStringToString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAnsiStringToUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAnsiCharToUnicodeChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeStringToAnsiString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlUpcaseUnicodeStringToAnsiString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlOemStringToUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeStringToOemString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeStringToOemString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlOemStringToCountedUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeStringToCountedOemString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeStringToCountedOemString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompareUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlHashUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidateUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDuplicateUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlPrefixUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindCharInUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopyUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAppendUnicodeStringToString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAppendUnicodeToString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDowncaseUnicodeChar(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeAnsiString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeOemString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlxUnicodeStringToAnsiSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlxUnicodeStringToOemSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlxAnsiStringToUnicodeSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlxOemStringToUnicodeSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultiByteToUnicodeN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultiByteToUnicodeSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeToMultiByteSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeToMultiByteN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeToMultiByteN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlOemToUnicodeN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeToOemN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeToOemN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlConsoleMultiByteToUnicodeN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsTextUnicode(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGUIDFromString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGenerate8dot3Name(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlIsNameLegalDOS8Dot3(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeContext(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRemoteCall(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAcquirePebLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlReleasePebLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAllocateFromPeb(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFreeToPeb(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetProcessIsCritical(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetThreadIsCritical(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateEnvironment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyEnvironment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetCurrentEnvironment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetEnvironmentVariable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsDosDeviceName_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryEnvironmentVariable_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlExpandEnvironmentStrings_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPfxInitialize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPfxInsertPrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPfxRemovePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuPfxFindPrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeUnicodePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInsertUnicodePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlRemoveUnicodePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFindUnicodePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlNextUnicodePrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCompressionWorkSpaceSize(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompressBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDecompressBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDecompressFragment(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlDescribeChunk(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlReserveChunk(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlDecompressChunks(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCompressChunks(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateProcessParameters(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyProcessParameters(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNormalizeProcessParams(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeNormalizeProcessParams(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateUserProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateUserThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlExitUserThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFreeUserThreadStack(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImageNtHeaderEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImageNtHeader(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddressInSectionTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlSectionTableFromVirtualAddress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImageDirectoryEntryToData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlImageDirectoryEntryToData32(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImageRvaToSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImageRvaToVa(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlPrefetchMemoryNonTemporal(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompareMemoryUlong(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFillMemoryUlong(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFillMemoryUlonglong(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeExceptionLog(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnhandledExceptionFilter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlUnhandledExceptionFilter2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgUserBreakPoint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgBreakPointWithStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgPrintEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuvDbgPrintEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuvDbgPrintExWithPrefix(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgPrintReturnControlC(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgQueryDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgSetDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgPrompt(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgLoadImageSymbols(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUnLoadImageSymbols(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgCommandString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCutoverTimeToSystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSystemTimeToLocalTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLocalTimeToSystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTimeToElapsedTimeFields(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTimeToTimeFields(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTimeFieldsToTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTimeToSecondsSince1980(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSecondsSince1980ToTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTimeToSecondsSince1970(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSecondsSince1970ToTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryTimeZoneInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetTimeZoneInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlSetActiveTimeBias(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeBitMap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlClearBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTestBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlClearAllBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetAllBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindClearBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindSetBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindClearBitsAndSet(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindSetBitsAndClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlClearBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindClearRuns(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindLongestRunClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFindFirstRunClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNumberOfClearBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNumberOfSetBits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAreBitsClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAreBitsSet(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindNextForwardRunClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindLastBackwardRunClear(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindLeastSignificantBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindMostSignificantBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEqualPrefixSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLengthRequiredSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFreeSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAllocateAndInitializeSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIdentifierAuthoritySid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSubAuthoritySid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSubAuthorityCountSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLengthSid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopySid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopySidAndAttributesArray(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLengthSidAsUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlConvertSidToUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopyLuid(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCopyLuidAndAttributesArray(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAreAllAccessesGranted(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAreAnyAccessesGranted(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMapGenericMask(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateAcl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidAcl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryInformationAcl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetInformationAcl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetOwnerSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetOwnerSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessAllowedAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessAllowedAceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessDeniedAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessDeniedAceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAuditAccessAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAuditAccessAceEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessAllowedObjectAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAccessDeniedObjectAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddAuditAccessObjectAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFirstFreeAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAddCompoundAce(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCreateSecurityDescriptorRelative(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLengthSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlValidRelativeSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetControlSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetControlSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlSetAttributesSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetDaclSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetDaclSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetSecurityDescriptorRMControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetSecurityDescriptorRMControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetSaclSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetSaclSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetGroupSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetGroupSecurityDescriptor(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMakeSelfRelativeSD(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAbsoluteToSelfRelativeSD(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSelfRelativeToAbsoluteSD(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSelfRelativeToAbsoluteSD2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlNewSecurityGrantedAccess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlMapSecurityErrorToNtStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlImpersonateSelf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAdjustPrivilege(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAcquirePrivilege(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlReleasePrivilege(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRunEncodeUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRunDecodeUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEraseUnicodeString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFindMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFormatMessage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFormatMessageEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlStartRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAbortRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAddAttributeActionToRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAddActionToRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlApplyRXact(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlApplyRXactNoFlush(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNtStatusToDosError(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNtStatusToDosErrorNoTeb(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCurrentPeb(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCustomCPToUnicodeN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnicodeToCustomCPN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpcaseUnicodeToCustomCPN(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitCodePageTable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitNlsTables(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlResetRtlTranslations(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlGetDefaultCodePage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeRangeList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFreeRangeList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCopyRangeList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAddRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlDeleteRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlDeleteOwnersRanges(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlFindRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlIsRangeAvailable(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlGetFirstRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlGetLastRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlGetNextRange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlMergeRangeLists(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInvertRangeList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlVolumeDeviceToDosName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCreateSystemVolumeInformationFolder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetVersion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlVerifyVersionInfo(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlFlushSecureMemoryCache(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetLastWin32Error(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetLastWin32ErrorAndNtStatusFromNtStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetLastWin32Error(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRestoreLastWin32Error(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetSetBootStatusData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLockBootStatusData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUnlockBootStatusData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateBootStatusDataFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDelayExecution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySystemEnvironmentValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetSystemEnvironmentValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySystemEnvironmentValueEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetSystemEnvironmentValueEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtEnumerateSystemEnvironmentValuesEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAddBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtModifyBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtEnumerateBootEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryBootEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetBootEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryBootOptions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetBootOptions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtTranslateFilePath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAddDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtModifyDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtEnumerateDriverEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDriverEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetDriverEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtClearEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPulseEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtResetEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetEventBoostPriority(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetLowWaitHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetHighWaitLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReleaseMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReleaseSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCancelTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetSystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryTimerResolution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetTimerResolution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAllocateLocallyUniqueId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetUuidSeed(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAllocateUuids(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtStartProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtStopProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetIntervalProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryIntervalProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryPerformanceCounter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReleaseKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitForKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySystemInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetSystemInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSystemDebugControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRaiseHardError(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDefaultLocale(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetDefaultLocale(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInstallUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDefaultUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetDefaultUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetDefaultHardErrorPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtShutdownSystem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDisplayString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAddAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFindAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCancelIoFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateNamedPipeFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateMailslotFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFlushBuffersFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtNotifyChangeDirectoryFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryAttributesFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryFullAttributesFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryEaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeviceIoControlFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFsControlFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtLockFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDirectoryFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryQuotaInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryVolumeInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReadFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetQuotaInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetVolumeInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWriteFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnlockFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReadFileScatter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetEaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWriteFileGather(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtLoadDriver(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnloadDriver(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRemoveIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCallbackReturn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtYieldExecution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreatePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateWaitablePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSecureConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtListenPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAcceptConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCompleteConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRequestPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRequestWaitReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReplyWaitReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReplyWaitReceivePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReplyWaitReceivePortEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtImpersonateClientOfPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReadRequestData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWriteRequestData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtMapViewOfSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnmapViewOfSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtExtendSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAreMappedFilesTheSame(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAllocateVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFreeVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReadVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWriteVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFlushVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtLockVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnlockVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtProtectVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtMapUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtMapUserPhysicalPagesScatter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAllocateUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFreeUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtGetWriteWatch(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtResetWriteWatch(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreatePagingFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFlushInstructionCache(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFlushWriteBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDuplicateObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtMakeTemporaryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtMakePermanentObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSignalAndWaitForSingleObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitForSingleObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitForMultipleObjects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtWaitForMultipleObjects32(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetSecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtClose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateSymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenSymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQuerySymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtGetPlugPlayEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPlugPlayControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPowerInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetThreadExecutionState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtRequestWakeupLatency(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtCancelDeviceWakeupRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtRequestDeviceWakeup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateProcessEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtTerminateProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtGetNextProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtGetNextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryPortInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtTerminateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSuspendThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtResumeThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSuspendProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtResumeProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtGetContextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetContextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAlertThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAlertResumeThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtImpersonateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtTestAlert(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRegisterThreadTerminatePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetLdtEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueueApcThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAssignProcessToJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtTerminateJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtIsProcessInJob(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateJobSet(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtEnumerateKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtEnumerateValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFlushKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtInitializeRegistry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtNotifyChangeKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtNotifyChangeMultipleKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtLoadKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtLoadKey2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtLoadKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryMultipleValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtReplaceKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRenameKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCompactKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCompressKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRestoreKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSaveKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSaveKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSaveMergedKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnloadKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnloadKey2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtUnloadKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryOpenSubKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryOpenSubKeysEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtLockRegistryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtLockProductActivationKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheck(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckByType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckByTypeResultList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCompareTokens(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenThreadToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenThreadTokenEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenProcessToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenProcessTokenEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDuplicateToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtFilterToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtImpersonateAnonymousToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtQueryInformationToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetInformationToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAdjustPrivilegesToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAdjustGroupsToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPrivilegeCheck(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckByTypeAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckByTypeResultListAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtAccessCheckByTypeResultListAndAuditAlarmByHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtOpenObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPrivilegeObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCloseObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtPrivilegedServiceAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtContinue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtRaiseException(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDelayExecution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySystemEnvironmentValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetSystemEnvironmentValue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySystemEnvironmentValueEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetSystemEnvironmentValueEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwEnumerateSystemEnvironmentValuesEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAddBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwModifyBootEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwEnumerateBootEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryBootEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetBootEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryBootOptions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetBootOptions(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwTranslateFilePath(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAddDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwModifyDriverEntry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwEnumerateDriverEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDriverEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetDriverEntryOrder(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwClearEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPulseEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwResetEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetEventBoostPriority(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetLowWaitHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetHighWaitLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetLowEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetHighEventPair(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReleaseMutant(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReleaseSemaphore(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCancelTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetSystemTime(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryTimerResolution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetTimerResolution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAllocateLocallyUniqueId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetUuidSeed(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAllocateUuids(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwStartProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwStopProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetIntervalProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryIntervalProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryPerformanceCounter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReleaseKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitForKeyedEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySystemInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetSystemInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSystemDebugControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRaiseHardError(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDefaultLocale(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetDefaultLocale(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInstallUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDefaultUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetDefaultUILanguage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetDefaultHardErrorPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwShutdownSystem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDisplayString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAddAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFindAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationAtom(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCancelIoFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateNamedPipeFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateMailslotFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFlushBuffersFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwNotifyChangeDirectoryFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryAttributesFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryFullAttributesFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryEaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeviceIoControlFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFsControlFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLockFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDirectoryFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryQuotaInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryVolumeInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReadFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetQuotaInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetVolumeInformationFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWriteFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnlockFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReadFileScatter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetEaFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWriteFileGather(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLoadDriver(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnloadDriver(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRemoveIoCompletion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCallbackReturn(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetDebugFilterState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwYieldExecution(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreatePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateWaitablePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSecureConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwListenPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAcceptConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCompleteConnectPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRequestPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRequestWaitReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReplyWaitReplyPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReplyWaitReceivePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReplyWaitReceivePortEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwImpersonateClientOfPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReadRequestData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWriteRequestData(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationPort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwMapViewOfSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnmapViewOfSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwExtendSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAreMappedFilesTheSame(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAllocateVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFreeVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReadVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWriteVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFlushVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLockVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnlockVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwProtectVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryVirtualMemory(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwMapUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwMapUserPhysicalPagesScatter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAllocateUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFreeUserPhysicalPages(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwGetWriteWatch(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwResetWriteWatch(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreatePagingFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFlushInstructionCache(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFlushWriteBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDuplicateObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwMakeTemporaryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwMakePermanentObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSignalAndWaitForSingleObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitForSingleObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitForMultipleObjects(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwWaitForMultipleObjects32(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetSecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwClose(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryDirectoryObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateSymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenSymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQuerySymbolicLinkObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwGetPlugPlayEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPlugPlayControl(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPowerInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetThreadExecutionState(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwRequestWakeupLatency(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwCancelDeviceWakeupRequest(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwRequestDeviceWakeup(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateProcessEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwTerminateProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwGetNextProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwGetNextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryPortInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwTerminateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSuspendThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwResumeThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSuspendProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwResumeProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwGetContextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetContextThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAlertThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAlertResumeThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwImpersonateThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwTestAlert(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRegisterThreadTerminatePort(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetLdtEntries(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueueApcThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAssignProcessToJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwTerminateJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwIsProcessInJob(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateJobSet(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationJobObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwEnumerateKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwEnumerateValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFlushKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwInitializeRegistry(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwNotifyChangeKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwNotifyChangeMultipleKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLoadKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLoadKey2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwLoadKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryMultipleValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwReplaceKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRenameKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCompactKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCompressKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRestoreKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSaveKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSaveKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSaveMergedKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnloadKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnloadKey2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwUnloadKeyEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryOpenSubKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryOpenSubKeysEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLockRegistryKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwLockProductActivationKeys(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheck(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckByType(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckByTypeResultList(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCreateToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCompareTokens(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenThreadToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenThreadTokenEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenProcessToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenProcessTokenEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDuplicateToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwFilterToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwImpersonateAnonymousToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwQueryInformationToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwSetInformationToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAdjustPrivilegesToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAdjustGroupsToken(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPrivilegeCheck(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckByTypeAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckByTypeResultListAndAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwAccessCheckByTypeResultListAndAuditAlarmByHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwOpenObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPrivilegeObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwCloseObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwDeleteObjectAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwPrivilegedServiceAuditAlarm(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwContinue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuZwRaiseException(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuDbgPrint(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDebugService2(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerAdd(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlEnlargedIntegerMultiply(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlEnlargedUnsignedMultiply(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlEnlargedUnsignedDivide(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerNegate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerSubtract(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlExtendedMagicDivide(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlExtendedLargeIntegerDivide(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerDivide(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlExtendedIntegerMultiply(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlConvertLongToLargeInteger(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlConvertUlongToLargeInteger(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerShiftLeft(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerShiftRight(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlLargeIntegerArithmeticShift(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCheckBit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlIsValidOemCharacter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlpImageNtHeader(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDetermineDosPathNameType_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseCreate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseValidate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseAdd(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseFind(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseEnumerate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlTraceDatabaseUnlock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlpGetStackLimits(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEnterCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlLeaveCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsCriticalSectionLocked(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsCriticalSectionLockedByThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCriticalSectionRecursionCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlTryEnterCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlEnableEarlyCriticalSectionEventCreation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitializeCriticalSectionAndSpinCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetCriticalSectionSpinCount(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrDisableThreadCalloutsForDll(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrLoadDll(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrUnloadDll(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetDllHandle(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetDllHandleEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetDllHandleByMapping(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetDllHandleByName(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrAddRefDll(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetProcedureAddress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrGetProcedureAddressEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrLockLoaderLock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLdrRelocateImage(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLdrRelocateImageWithBias(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrProcessRelocationBlock(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLdrVerifyMappedImageMatchesChecksum(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrQueryModuleServiceTags(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrRegisterDllNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrUnregisterDllNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuCsrGetProcessId(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuA_SHAFinal(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuA_SHAUpdate(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuA_SHAInit(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlDosPathNameToNtPathName_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDosPathNameToNtPathName_U_WithStatus(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddVectoredExceptionHandler(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlAddVectoredContinueHandler(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlAnalyzeProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCallVectoredContinueHandlers(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEncodePointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDecodePointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlEncodeSystemPointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDecodeSystemPointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteResource(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteSecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDllShutdownInProgress(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCurrentProcessorNumber(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetUnloadEventTrace(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlInitializeProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlIsThreadWithinLoaderCallout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlSetLFHDebuggingInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultipleAllocateHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlMultipleFreeHeap(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNewSecurityObjectEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlNewSecurityObjectWithMultipleInheritance(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQuerySecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRegisterWait(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRemoveVectoredContinueHandler(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRemoveVectoredExceptionHandler(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetIoCompletionCallback(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetSecurityObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetSecurityObjectEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRTLP_UNHANDLED_EXCEPTION_FILTER(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetUnhandledExceptionFilter(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlStartProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlStopProfile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlWow64EnableFsRedirection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlWow64EnableFsRedirectionEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlRegisterWait(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeregisterWait(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeregisterWaitEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuKiUserCallbackDispatcher(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrClientConnectToServer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrClientCallServer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrAllocateCaptureBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrFreeCaptureBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrAllocateMessagePointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrCaptureMessageBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrCaptureMessageString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrCaptureTimeout(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrProbeForWrite(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrProbeForRead(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrNewThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrIdentifyAlertableThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuCsrSetPriorityClass(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCreateProcessReflection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCloneUserProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrShutdownProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessModuleInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessBackTraceInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessHeapInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessLockInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateQueryDebugBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDestroyQueryDebugBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlQueryProcessDebugInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCreateTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlUpdateTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteTimer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteTimerQueue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDeleteTimerQueueEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDoesFileExists_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetCurrentDirectory_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlSetCurrentDirectory_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlDosSearchPath_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlInitString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetFullPathName_U(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlCompareString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrRegisterDllNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuLdrUnregisterDllNotification(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuEtwRegisterSecurityProvider(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuEtwWriteUMSecurityEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuEtwEventWriteEndScenario(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuEtwEventWriteFull(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuEtwEventWriteStartScenario(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtCreateChannel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtOpenChannel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtListenChannel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtSendWaitReplyChannel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtReplyWaitSendChannel(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuAlpcUnregisterCompletionListWorkerThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlUpdateClonedCriticalSection(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlGetFullPathName_UstrEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLdrInitShimEngineDynamic(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtCreateKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtSetValueKey(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuNtDeleteFile(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    void EmuRtlGetVersion(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64QueryInformationProcess64(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64QueryVirtualMemory64(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64ReadVirtualMemory64(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64WriteVirtualMemory64(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64GetCurrentProcessorNumberEx(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrAllocateCaptureBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrAllocateMessagePointer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrCaptureMessageBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrCaptureMessageString(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrClientConnectToServer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrFreeCaptureBuffer(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64CsrIdentifyAlertableThread(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuZwWow64DebuggerCall(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCleanUpTEBLangLists(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuKiUserApcDispatcher(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuKiUserExceptionDispatcher(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtCreateDebugObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtDebugActiveProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtDebugContinue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtRemoveProcessDebug(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtSetInformationDebugObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtWaitForDebugEvent(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiConnectToDbg(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiGetThreadDebugObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiSetThreadDebugObject(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiWaitStateChange(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiContinue(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiStopDebugging(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiDebugActiveProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiRemoteBreakin(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuDbgUiIssueRemoteBreakin(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlExitUserProcess(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlQueueWorkItem(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuRtlCreateUserStack(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtdllDefWindowProc_W(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuNtdllDefWindowProc_A(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void EmuLdrQueryProcessModuleInformation(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void Emusprintf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void Emu_snprintf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void Emu_snwprintf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void Emuswprintf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);
    //void Emu_vscwprintf(uc_engine* uc, DWORD_PTR address, size_t size, void* user_data);

}


/* number of functions: 1228*/
